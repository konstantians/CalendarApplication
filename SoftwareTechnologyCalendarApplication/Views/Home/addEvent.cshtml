@model SoftwareTechnologyCalendarApplication.Models.Event

@{
    ViewData["Title"] = "addEvent";
}

<style>
    body {
        background-color: #f0f2f5;
    }
</style>

@if ((bool)ViewData["DuplicateEventTitle"])
{
    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
        <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
            <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
        </symbol>
    </svg>
    <div class="alert alert-danger d-flex align-items-center alert-dismissible fade show" role="alert">
        <svg class="bi flex-shrink-0 mr-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg>
        <div>
            You have another event with the given title.
        </div>
        <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
}

<div class="mt-1 mb-2 pt-2 pb-2 shadow" style="background-color: white;">
    <h1 class="text-center">Let's Add A New Event!</h1>

    <h4 class="text-center">Please fill out the following form:</h4>
</div>
<form asp-action="addEvent" style="background-color:white;">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="shadow pt-4 pb-4 pl-4 pr-4">
        <div class="row">
            <div class="col-md-6">
                <h4 class="text-center">Event Information</h4>
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" id="title" class="form-control" placeholder="Title"/>
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="StartingTime" class="control-label"></label>
                    <input asp-for="StartingTime" id="startingtime" class="form-control" />
                    <span asp-validation-for="StartingTime" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="EndingTime" class="control-label"></label>
                    <input asp-for="EndingTime" id="endingtime" class="form-control" />
                    <span asp-validation-for="EndingTime" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <textarea asp-for="Description" class="form-control" rows="3" placeholder="Description"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="AlertStatus" /> I want to be notified when the event begins
                    </label>
                </div>
            </div>

            <div class="col-md-6">
                <h4 class="text-center">Participants Section</h4>
                <label for="invitations">Who do you want to invite?</label>
                <select name="invitations[]" class="form-control" id="invitations" multiple>
                    @foreach (string username in (List<string>)ViewData["usernames"])
                    {
                        <option value="@username">@username</option>
                    }
                </select>

                <div class="d-flex justify-content-between mt-3 mb-2">
                    <div></div>
                    <h4 style="margin-left:45px;">Comments Section</h4>
                    <a class="btn btn-primary" data-toggle="collapse" href="#commentSection" role="button" aria-expanded="false"
                       aria-controls="commentSection" id="showCommentButton">
                        <i id="showCommentButtonIcon" class="fa-solid fa-chevron-down"></i>
                    </a>
                </div>
                <div id="commentSection" class="collapse mt-2">
                    <div id="commentArea">
                        <div class="alert alert-info" role="alert" id="noComments">
                            <strong>No comments!</strong> You have not added a comment yet.
                        </div>
                        <div class="alert alert-info" role="alert" id="noComments" style="display:none;">
                            <strong>No comments!</strong> There are no comments yet.
                        </div>
                    </div>
                    <label asp-for="EventComments">Add your comment:</label><br />
                    <textarea class="form-control" id="myComment" rows="3" placeholder="What do you think about this event?"></textarea>
                    <div class="d-flex justify-content-end">
                        <a class="btn btn-primary mt-2 mb-2" href="#" onclick="addComment()">Add Comment</a>
                    </div>
                </div>
            </div>
        </div>

        
        <input type="hidden" name="calendarId" value="@ViewData["CalendarId"]" />
        <input type="hidden" name="year" value="@ViewData["Year"]" />
        <input type="hidden" name="month" value="@ViewData["Month"]" />
        <input type="hidden" name="day" value="@ViewData["Day"]" />
        @*this input is used for the new comments*@
        <input type="hidden" name="newComments" id="newComments" value="" />
        <div class="d-flex justify-content-center">
            <a class="btn btn-outline-primary" asp-controller="Home" asp-action="ViewCalendarDay" asp-route-calendarId="@ViewData["CalendarId"]"
               asp-route-year="@ViewData["Year"]" asp-route-month="@ViewData["Month"]" asp-route-day="@ViewData["Day"]">Back to Calendar</a>
            <div class="ml-3">
                <input type="submit" value="Create new event" onclick="createCommentsForFormSubmission();" class="btn btn-outline-primary" />
            </div>
        </div>
    </div>
</form>

@*edit modal for temporary comments*@
<div class="modal fade" id="editCommentModal" tabindex="-1" role="dialog" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" id="editCommentText" rows="4" cols="65"></textarea>
                <div id="editCommentId" style="display:none;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveComment()">Save</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/site.js"></script>

    <script>
        new MultiSelectTag('invitations');
        //counter for the tempComments
        let commentCounter = 0;
        //list for new comments
        let newCommentsId = [];

        function hideDisplayAlert(id) {
            console.log("wow");
            let alertDiv = document.getElementById(id);
            if (alertDiv.style.display == "none") {
                alertDiv.style.display = "block";
            }
            else {
                alertDiv.style.display = "none";
            }
        }

        function addComment() {

            // hide the message that there are no comments yet if it exists.
            if (document.getElementById('noComments').style.display != 'none') {
                document.getElementById('noComments').style.display = 'none';
            }

            let commentText = document.getElementById("myComment").value;
            if (!commentText.trim()) {
                alert("Please enter a comment before adding.");
                return;
            }

            // Create a new card for the comment
            let commentCard = document.createElement("div");
            commentCard.classList.add("card", "mb-2");
            //id for deletion
            let commentId = `commentCard${commentCounter}`;
            commentCard.setAttribute("id", commentId);

            // Card Header
            let cardHeader = document.createElement("div");
            cardHeader.classList.add("card-header");

            let cardHeaderFlexPart = document.createElement("div");
            cardHeaderFlexPart.classList.add("d-flex", "justify-content-between")

            let usernameTitle = document.createElement("h5");
            usernameTitle.classList.add("card-title", "font-weight-bold");
            usernameTitle.innerHTML = '<i class="fa-solid fa-user mr-1"></i> ' + "@ActiveUser.User.Username";

            // Add the "Edit" and "Delete" buttons to the card header
            let buttonsDiv = document.createElement("div");
            let editButton = document.createElement("a");
            editButton.setAttribute("href", "#");
            editButton.classList.add("btn", "btn-primary", "btn-sm", "mr-2");
            editButton.innerHTML = '<i class="fa-solid fa-pencil"></i>';
            editButton.onclick = function () {
                openEditModal(commentId, commentText);
            };

            let deleteButton = document.createElement("a");
            deleteButton.setAttribute("href", "#");
            deleteButton.classList.add("btn", "btn-danger", "btn-sm");
            deleteButton.innerHTML = '<i class="fa-solid fa-x"></i>';
            deleteButton.onclick = function () {
                removetempComment(commentId);
            };

            cardHeaderFlexPart.appendChild(usernameTitle);

            buttonsDiv.appendChild(editButton);
            buttonsDiv.appendChild(deleteButton);
            cardHeaderFlexPart.appendChild(buttonsDiv);

            let dateSubtitle = document.createElement("p");
            dateSubtitle.classList.add("card-subtitle", "text-muted");
            dateSubtitle.innerText = new Date().toLocaleString();

            cardHeader.appendChild(cardHeaderFlexPart);
            cardHeader.appendChild(dateSubtitle);

            // Card Body
            let cardBody = document.createElement("div");
            cardBody.classList.add("card-body");
            cardBody.innerText = commentText;

            // Assemble the card
            commentCard.appendChild(cardHeader);
            commentCard.appendChild(cardBody);

            // Append the card to the commentArea
            let commentArea = document.getElementById("commentArea");
            commentArea.appendChild(commentCard);

            // Clear the comment textarea after adding the comment
            document.getElementById("myComment").value = "";

            // Increment the comment counter for the next comment
            commentCounter++;
            newCommentsId.push(commentId);
        }

        //for severons icons change
        function toggleSection(buttonId) {
            const buttonIcon = document.getElementById(buttonId + 'Icon');
            if (buttonIcon.classList.contains('fa-chevron-down')) {
                buttonIcon.classList.remove('fa-chevron-down');
                buttonIcon.classList.add('fa-chevron-up');

            } else {
                buttonIcon.classList.remove('fa-chevron-up');
                buttonIcon.classList.add('fa-chevron-down');
            }
        }

        document.getElementById("showCommentButton").addEventListener("click", function () {
            toggleSection("showCommentButton");
        });

        // Function to remove a comment from the list
        function removetempComment(commentId) {
            console.log("wow");
            let commentCard = document.getElementById(commentId);
            if (commentCard) {
                const index = newCommentsId.indexOf(commentId);
                newCommentsId.splice(index, 1);
                commentCard.remove();
            }

            // Show the "no comments" message if there are no comments left
            if (document.getElementById('commentArea').childElementCount === 1) {
                document.getElementById('noComments').style.display = 'block';
            }
        }

        //open modal for edit
        function openEditModal(commentId, commentText) {
            console.log("wow");
            // Set the comment text in the modal
            document.getElementById("editCommentText").value = commentText;

            // Set the comment ID in the modal (for identification during save)
            document.getElementById("editCommentId").value = commentId;

            // Show the modal
            $("#editCommentModal").modal("show");
        }

        function saveComment() {
            // Get the edited text from the modal
            let editedText = document.getElementById("editCommentText").value;

            // Get the comment ID for identification
            let commentId = document.getElementById("editCommentId").value;

            // Update the comment text on the page
            let commentCard = document.getElementById(commentId);
            if (commentCard) {
                commentCard.querySelector(".card-body").innerText = editedText;
            }

            // Hide the modal
            $("#editCommentModal").modal("hide");
        }

        function createCommentsForFormSubmission() {

            let newComments = "";
            for (let i = 0; i < newCommentsId.length; i++) {
                let commentCardId = document.getElementById(newCommentsId[i]);
                newComments += commentCardId.querySelector(".card-body").innerText;
                newComments += "|";
            }
            newComments = newComments.substring(0, newComments.length - 1);

            // Set the value of the hidden input
            document.getElementById("newComments").value = newComments;
        }
    </script>
    
}
