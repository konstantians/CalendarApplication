@model SoftwareTechnologyCalendarApplication.Models.Event

@{
    ViewData["Title"] = "addEvent";
    // placeholder=@Model.Title
}

<style>
    .notification-box {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #fafafa
    }

    .notification-title {
        margin: 0;
    }

    .notification-btn {
        border: none;
        background: none;
        cursor: pointer;
    }

    .notification-check-btn {
        color: blue;
    }

    .notification-close-btn {
        color: red;
    }

    .marker {
    }

    .mult-select-tag {
        display: flex;
        width: 100%;
        flex-direction: column;
        align-items: center;
        position: relative;
        --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        --tw-shadow-color: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
        --border-color: rgb(218, 221, 224);
        font-family: Verdana, sans-serif;
    }

        .mult-select-tag .wrapper {
            width: 100%;
        }

        .mult-select-tag .body {
            display: flex;
            border: 1px solid var(--border-color);
            background: white;
            min-height: 2.15rem;
            width: 100%;
            min-width: 14rem;
        }

        .mult-select-tag .input-container {
            display: flex;
            flex-wrap: wrap;
            flex: 1 1 auto;
            padding: 0.1rem;
        }

        .mult-select-tag .input-body {
            display: flex;
            width: 100%;
        }

        .mult-select-tag .input {
            flex: 1;
            background: transparent;
            border-radius: 0.25rem;
            padding: 0.45rem;
            margin: 10px;
            color: #2d3748;
            outline: 0;
            border: 1px solid var(--border-color);
        }

        .mult-select-tag .btn-container {
            color: #e2eBf0;
            padding: 0.5rem;
            display: flex;
            border-left: 1px solid var(--border-color);
        }

        .mult-select-tag button {
            cursor: pointer;
            width: 100%;
            color: #718096;
            outline: 0;
            height: 100%;
            border: none;
            padding: 0;
            background: transparent;
            background-image: none;
            -webkit-appearance: none;
            text-transform: none;
            margin: 0;
        }

            .mult-select-tag button:first-child {
                width: 1rem;
                height: 90%;
            }


        .mult-select-tag .drawer {
            position: absolute;
            background: white;
            max-height: 15rem;
            z-index: 40;
            top: 98%;
            width: 100%;
            overflow-y: scroll;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
        }

        .mult-select-tag ul {
            list-style-type: none;
            padding: 0.5rem;
            margin: 0;
        }

            .mult-select-tag ul li {
                padding: 0.5rem;
                border-radius: 0.25rem;
                cursor: pointer;
            }

                .mult-select-tag ul li:hover {
                    background: rgb(243 244 246);
                }

        .mult-select-tag .item-container {
            display: flex;
            justify-content: center;
            align-items: center;
            color: #2c7a7b;
            padding: 0.2rem 0.4rem;
            margin: 0.2rem;
            font-weight: 500;
            border: 1px solid #81e6d9;
            background: #e6fffa;
            border-radius: 9999px;
        }

        .mult-select-tag .item-label {
            max-width: 100%;
            line-height: 1;
            font-size: 0.75rem;
            font-weight: 400;
            flex: 0 1 auto;
            color: #2c7a7b;
        }

        .mult-select-tag .item-close-container {
            display: flex;
            flex: 1 1 auto;
            flex-direction: row-reverse;
        }

        .mult-select-tag .item-close-svg {
            width: 1rem;
            margin-left: 0.5rem;
            height: 1rem;
            cursor: pointer;
            border-radius: 9999px;
            display: block;
        }

    .hidden {
        display: none;
    }

    .mult-select-tag .shadow {
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    }

    .mult-select-tag .rounded {
        border-radius: .375rem;
    }

</style>
<!--<style>
    .mul-select {
        width: 100%;
    }
</style>-->
<h1 class="text-center">Let's add a new event!</h1>

<h4 class="text-center">Please fill out the following form:</h4>
<hr />

<form asp-action="addEvent">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @*@Html.DropDownList()*@
    <!--<label for="invitations">Who do you want to invite?</label><br />
    <select name="invitations" id="invitations" class="mul-select" multiple>
        <option value="EliasLgt">EliasLgt</option>
        <option value="Kinnas">Kinnas</option>
    </select>-->
    <div class="row">
        <div class="col-md-3">
            <div style="margin-top: 25px;">
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" id="title" class="form-control" placeholder="Title"/>
                    <span asp-validation-for="Title" class="text-danger"></span>
                    <span class="text-danger" id="titleProblem" style="display:none">You need to provide a title for the event before submiting.</span>
                </div>
            </div>
            <div style="margin-top: 15px;">
                <div class="form-group">
                    <label asp-for="StartingTime" class="control-label"></label>
                    <input asp-for="StartingTime" id="startingtime" class="form-control" />
                    <span asp-validation-for="StartingTime" class="text-danger"></span>
                    <span class="text-danger" id="startProblem" style="display:none">
                        The minute field of the starting time of the event must be :00 or :30.Nothing else.
                    </span>
                </div>
            </div>
            <div style="margin-top: 15px;">
                <div class="form-group">
                    <label asp-for="EndingTime" class="control-label"></label>
                    <input asp-for="EndingTime" id="endingtime" class="form-control" />
                    <span asp-validation-for="EndingTime" class="text-danger"></span>
                    <span class="text-danger" id="endProblem" style="display:none">
                        The minute field of the ending time of the event must be :00 or :30.Nothing else.
                    </span>
                </div>
            </div>
        </div>

        <div class="col-md-4 offset-md-1">
            <div class="row" style="margin-top: 25px;">
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <textarea asp-for="Description" class="form-control" rows="4" cols="65" placeholder="Description"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <div class="row" style="margin-top: 50px; margin-left: 10px;">
                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="AlertStatus" /> I want to be notified when the event begins
                    </label>
                </div>
            </div>
        </div>
        <div class="col-md-3 offset-md-1">
            <div style="margin-top: 15px;">
                <label for="Invitation">Who do you want to invite?</label>
                <select name="Invitation[]" class="form-control" id="Invitation" multiple>
                    @foreach (string username in (List<string>)ViewData["usernames"])
                    {
                        <option value="@username">@username</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <!--<div class="row">
        <div class="form-group">
            <label for="invitations">Who do you want to invite?</label><br />
            <select name="invitations" id="invitations" class="mul-select"  multiple="multiple">
                <option value="EliasLgt">EliasLgt</option>
                <option value="Kinnas">Kinnas</option>
            </select>
        </div>
    </div>-->
    <!--<div class="row" style="margin-top: 35px;">
        <div class="col-md-3">
            <label for="Invitation">Who do you want add to the invitation list?</label>
            <select name="Invitation" class="form-control" id="Invitation" multiple>
                @*@for (int i = 0; i <= (int)ViewData["LastNumber"]; i++)
                {
                    if (ViewData[i.ToString()] != ViewData["usernm"])
                    {
                        <option value="@ViewData[i.ToString()]">@ViewData[i.ToString()]</option>
                    }
                }*@
            </select>
        </div>
        <div class="col-md-5">
            <label for="Invitation">Who do you want add to the invitation list?</label>
            <select name="Invitation" class="form-control" id="Invitation" onchange="addInvitation()">
                <option value="">Choose One Of The Users Of The App</option>
                @*@for (int i = 0; i <= (int)ViewData["LastNumber"]; i++)
                {
                    if (ViewData[i.ToString()] != ViewData["usernm"])
                    {
                        <option value="@ViewData[i.ToString()]">@ViewData[i.ToString()]</option>
                    }
                }*@
            </select>
        </div>
        <div class="col-md-5 offset-md-1" id="invited">
            Invitations to be sent:
        </div>
    </div>-->

    <input type="hidden" name="calendarId" value="@ViewData["CalendarId"]" />
    <input type="hidden" name="year" value="@ViewData["Year"]" />
    <input type="hidden" name="month" value="@ViewData["Month"]" />
    <input type="hidden" name="day" value="@ViewData["Day"]" />
    <div class="d-flex justify-content-center" style="margin-top: 35px;">
        <a class="btn btn-outline-primary" asp-controller="Home" asp-action="ViewCalendarDay" asp-route-calendarId="@ViewData["CalendarId"]"
           asp-route-year="@ViewData["Year"]" asp-route-month="@ViewData["Month"]" asp-route-day="@ViewData["Day"]">Back to Calendar</a>
        <div class="ml-3">
            <input type="submit" value="Create new event" onclick="return Validation();" class="btn btn-outline-primary" />
        </div>
    </div>
</form>
<div class="row align-items-center">
    <div class="mx-auto col-md-5">
        <span class="text-danger" id="start>endProblem" style="display:none">
            The starting time of the event cannot be greater than or equal to the ending time.
        </span>
    </div>
</div>


<script type="text/javascript">
    function MultiSelectTag(el, customs = { shadow: false, rounded: true }) {
        var element = null
        var options = null
        var customSelectContainer = null
        var wrapper = null
        var btnContainer = null
        var body = null
        var inputContainer = null
        var inputBody = null
        var input = null
        var button = null
        var drawer = null
        var ul = null
        var domParser = new DOMParser()
        init()

        function init() {
            element = document.getElementById(el)
            createElements()
            initOptions()
            enableItemSelection()
            setValues(false)

            button.addEventListener('click', () => {
                if (drawer.classList.contains('hidden')) {
                    initOptions()
                    enableItemSelection()
                    drawer.classList.remove('hidden')
                    input.focus()
                }
            })

            input.addEventListener('keyup', (e) => {
                initOptions(e.target.value)
                enableItemSelection()
            })

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && inputContainer.childElementCount > 1) {
                    const child = body.children[inputContainer.childElementCount - 2].firstChild
                    const option = options.find((op) => op.value == child.dataset.value)
                    option.selected = false
                    removeTag(child.dataset.value)
                    setValues()
                }

            })

            window.addEventListener('click', (e) => {
                if (!customSelectContainer.contains(e.target)) {
                    drawer.classList.add('hidden')
                }
            });

        }

        function createElements() {
            // Create custom elements
            options = getOptions();
            element.classList.add('hidden')

            // .multi-select-tag
            customSelectContainer = document.createElement('div')
            customSelectContainer.classList.add('mult-select-tag')

            // .container
            wrapper = document.createElement('div')
            wrapper.classList.add('wrapper')

            // body
            body = document.createElement('div')
            body.classList.add('body')
            if (customs.shadow) {
                body.classList.add('shadow')
            }
            if (customs.rounded) {
                body.classList.add('rounded')
            }

            // .input-container
            inputContainer = document.createElement('div')
            inputContainer.classList.add('input-container')

            // input
            input = document.createElement('input')
            input.classList.add('input')
            input.placeholder = `${customs.placeholder || 'Search...'}`

            inputBody = document.createElement('inputBody')
            inputBody.classList.add('input-body')
            inputBody.append(input)

            body.append(inputContainer)

            // .btn-container
            btnContainer = document.createElement('div')
            btnContainer.classList.add('btn-container')

            // button
            button = document.createElement('button')
            button.type = 'button'
            btnContainer.append(button)

            const icon = domParser.parseFromString(`<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="18 15 12 21 6 15"></polyline></svg>`, 'image/svg+xml').documentElement
            button.append(icon)


            body.append(btnContainer)
            wrapper.append(body)

            drawer = document.createElement('div');
            drawer.classList.add(...['drawer', 'hidden'])
            if (customs.shadow) {
                drawer.classList.add('shadow')
            }
            if (customs.rounded) {
                drawer.classList.add('rounded')
            }
            drawer.append(inputBody)
            ul = document.createElement('ul');

            drawer.appendChild(ul)

            customSelectContainer.appendChild(wrapper)
            customSelectContainer.appendChild(drawer)

            // Place TailwindTagSelection after the element
            if (element.nextSibling) {
                element.parentNode.insertBefore(customSelectContainer, element.nextSibling)
            }
            else {
                element.parentNode.appendChild(customSelectContainer);
            }
        }

        function initOptions(val = null) {
            ul.innerHTML = ''
            for (var option of options) {
                if (option.selected) {
                    !isTagSelected(option.value) && createTag(option)
                }
                else {
                    const li = document.createElement('li')
                    li.innerHTML = option.label
                    li.dataset.value = option.value

                    // For search
                    if (val && option.label.toLowerCase().startsWith(val.toLowerCase())) {
                        ul.appendChild(li)
                    }
                    else if (!val) {
                        ul.appendChild(li)
                    }
                }
            }
        }

        function createTag(option) {
            // Create and show selected item as tag
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('item-container');
            const itemLabel = document.createElement('div');
            itemLabel.classList.add('item-label');
            itemLabel.innerHTML = option.label
            itemLabel.dataset.value = option.value
            const itemClose = new DOMParser().parseFromString(`<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="item-close-svg">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>`, 'image/svg+xml').documentElement

            itemClose.addEventListener('click', (e) => {
                const unselectOption = options.find((op) => op.value == option.value)
                unselectOption.selected = false
                removeTag(option.value)
                initOptions()
                setValues()
            })

            itemDiv.appendChild(itemLabel)
            itemDiv.appendChild(itemClose)
            inputContainer.append(itemDiv)
        }

        function enableItemSelection() {
            // Add click listener to the list items
            for (var li of ul.children) {
                li.addEventListener('click', (e) => {
                    options.find((o) => o.value == e.target.dataset.value).selected = true
                    input.value = null
                    initOptions()
                    setValues()
                    input.focus()
                })
            }
        }

        function isTagSelected(val) {
            // If the item is already selected
            for (var child of inputContainer.children) {
                if (!child.classList.contains('input-body') && child.firstChild.dataset.value == val) {
                    return true
                }
            }
            return false
        }
        function removeTag(val) {
            // Remove selected item
            for (var child of inputContainer.children) {
                if (!child.classList.contains('input-body') && child.firstChild.dataset.value == val) {
                    inputContainer.removeChild(child)
                }
            }
        }
        function setValues(fireEvent = true) {
            // Update element final values
            selected_values = []
            for (var i = 0; i < options.length; i++) {
                element.options[i].selected = options[i].selected
                if (options[i].selected) {
                    selected_values.push({ label: options[i].label, value: options[i].value })
                }
            }
            if (fireEvent && customs.hasOwnProperty('onChange')) {
                customs.onChange(selected_values)
            }
        }
        function getOptions() {
            // Map element options
            return [...element.options].map((op) => {
                return {
                    value: op.value,
                    label: op.label,
                    selected: op.selected,
                }
            })
        }
    }
</script>

<script type="text/javascript">
    new MultiSelectTag('Invitation', {
        rounded: true,    // default true
        shadow: false,      // default false
        placeholder: 'Search',  // default Search...
        onChange: function (values) {
            console.log(values)
        }
    })  // id
</script>

<!--<script>
    function addInvitation() {
        var x = document.getElementById("Invitation").value;
        if (x==""){
            return 0;
        }
        console.log(x);
        const newDiv = document.createElement("div");
        newDiv.id = x;
        newDiv.innerText=x;
        newDiv.classList.add("notification-box");
        const newButton = document.createElement("button");
        newButton.type="button";
        newButton.innerText="Remove";
        newButton.classList.add("btn");
        newButton.classList.add("btn-outline-danger");
        //newButton.onclick("document.getElementById('x').remove()");
        newButton.onclick = function () {
            document.getElementById(x).remove();
        };
        const newSpan = document.createElement("span");
        document.getElementById("invited").appendChild(newDiv);
        newDiv.appendChild(newSpan);
        newSpan.appendChild(newButton);
        //document.getElementById("demo").innerHTML = "You selected: " + x;
    }
    function DeleteSpecificDiv(){

    }
</script>-->

<script type="text/javascript">
    //function closeModal(id){
    //    let modal = document.getElementById(id);
    //    modal.style.display='none';
    //}
    function Validation(){
        console.log(document.getElementById("Invitation").value);
        if (document.getElementById("startProblem").style.display=="block"){
            hideDisplayAlert("startProblem");
        }
        if (document.getElementById("endProblem").style.display=="block"){
            hideDisplayAlert("endProblem");
        }
        if (document.getElementById("start>endProblem").style.display == "block") {
            hideDisplayAlert("start>endProblem");
        }
        if (document.getElementById("titleProblem").style.display == "block") {
            hideDisplayAlert("titleProblem");
        }
        let i=0;
        var startingTime = document.getElementById("startingtime").value;
        var endingTime = document.getElementById("endingtime").value;
        const Start = Date.parse(startingTime);
        const End = Date.parse(endingTime);
        let minsOfStart=startingTime.split(":")[1];
        let minsOfEnd = endingTime.split(":")[1];
        console.log(startingTime);
        console.log(typeof startingTime);
        if (minsOfStart != "00" && minsOfStart != "30") {
            hideDisplayAlert("startProblem")//document.getElementById("startProblem").style.display='block';  //hideDisplayAlert("startProblem")//alert("The minute field of the starting time of the event must be :00 or :30. Nothing else."); //na kano unhidden to ena alert <div> opos tou kinna
            i=1;
        }
        if (minsOfEnd != "00" && minsOfEnd != "30") {
            hideDisplayAlert("endProblem")//alert("The minute field of the ending time of the event must be :00 or :30. Nothing else.");
            i=1;
        }
        if (Start >= End){
            hideDisplayAlert("start>endProblem")//alert("The starting time of the event must cannot be greater than or equal to the ending time.");
            i=1;
        }
        var title = document.getElementById("title").value;
        if (title == null || title == "") {
            hideDisplayAlert("titleProblem")//alert("You need to provide a title for the event before submiting.");
            i=1;
        }
        if(i!=0){
            return false;
        }
    }
</script>

<script type="text/javascript">
    function hideDisplayAlert(id){
        let alertDiv = document.getElementById(id);
        if (alertDiv.style.display == "none"){
            alertDiv.style.display = "block";
        }
        else{
            alertDiv.style.display = "none";
        }
    }
</script>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
