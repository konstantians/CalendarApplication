@model SoftwareTechnologyCalendarApplication.Models.Event
@{
    ViewData["Title"] = "editEvent";
}

<style>
    body {
        background-color: #f0f2f5;
    }

    /* Styles for the cool bubbles */
    .badge {
        display: inline-block;
        padding: 6px 10px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        background-color: #007bff;
        color: #fff;
    }

    /* Styles for the wrapper div to ensure proper alignment */
    .d-flex.flex-wrap {
        margin-top: 5px;
    }
</style>

<div class="mt-1 mb-2 pt-2 pb-2 shadow" style="background-color: white;">
    @{
        if ((int)ViewData["forein"] == 0)
        {
            <h1 class="text-center">Event editing form</h1>

            <h4 class="text-center">Please edit the following event as you like:</h4>
        }
        else if ((int)ViewData["forein"] == 1)
        {
            <h1 class="text-center">Event details</h1>

            <h4 class="text-center">It seems, you are not the creator of the event. Thus, you can not alter its details, but you can always add a comment and toggle your personal alertstatus.</h4>
        }
    }
</div>
<form asp-action="editEvent" style="background-color:white;">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="shadow pt-4 pb-4 pl-4 pr-4">
        <div class="row">
            <div class="col-md-6">
                <h4 class="text-center d-none d-sm-none d-md-block">Event Information</h4>
                <div class="d-block d-sm-block d-md-none">
                    <div class="d-flex justify-content-between mt-3 mb-2">
                        <div></div>
                        <h4>Event Information</h4>
                        <a class="btn btn-primary" data-toggle="collapse" href="#eventInformationSection" role="button" aria-expanded="false"
                           aria-controls="eventInformationSection" id="showEventInformationButton">
                            <i id="showEventInformationButtonIcon" class="fa-solid fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div id="eventInformationSection" class="collapse show">
                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="Title" class="form-control" id="title" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('title', @ViewData["forein"])">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        ::before
                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                    </svg>

                                    Edit
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="StartingTime" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="StartingTime" class="form-control" id="startingTime" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('startingTime', @ViewData["forein"])">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        ::before
                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                    </svg>

                                    Edit
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="StartingTime" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="EndingTime" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="EndingTime" class="form-control" id="endingTime" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('endingTime', @ViewData["forein"])">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        ::before
                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                    </svg>

                                    Edit
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="EndingTime" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Description" class="control-label"></label>
                        <div class="input-group">
                            <textarea asp-for="Description" class="form-control" id="description" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" rows="3"></textarea>
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('description', @ViewData["forein"])">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        ::before
                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                    </svg>

                                    Edit
                                </button>
                            </div>
                        </div>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="AlertStatus" /> I want to be notified when the event begins
                        </label>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex justify-content-between mt-2 mt-md-0">
                    <div></div>
                    <h4>Participants Section</h4>
                    <a class="btn btn-primary" data-toggle="collapse" href="#participationSection" role="button" aria-expanded="false" 
                    aria-controls="participationSection" id="showParticipationButton">
                        <i id="showParticipationButtonIcon" class="fa-solid fa-chevron-down"></i>
                    </a>
                </div>

                <div id="participationSection" class="collapse">
                    <p> Members Who Participate In The Event: </p>
                    <div class="d-flex flex-wrap mt-3">
                        @foreach (User user in Model.UsersThatParticipateInTheEvent)
                        {
                            <span class="badge badge-primary mr-2 mb-2">@user.Username</span>
                        }
                    </div>
                    <div>
                        <label for="invitations">Who do you want to invite?</label>
                        <select name="invitations[]" class="form-control" id="invitations" multiple>
                            @foreach (string username in (List<string>)ViewData["usernames"])
                            {
                                <option value="@username">@username</option>
                            }
                        </select>
                    </div>
                </div>
                
                <div class="d-flex justify-content-between mt-3 mb-2">
                    <div></div>
                    <h4>Comments Section</h4>
                    <a class="btn btn-primary" data-toggle="collapse" href="#commentSection" role="button" aria-expanded="false"
                        aria-controls="commentSection" id="showCommentButton">
                        <i id="showCommentButtonIcon" class="fa-solid fa-chevron-down"></i>
                    </a>
                </div>
                <div id="commentSection" class="collapse mt-2">
                    <div id="commentArea">
                        @if (Model.EventComments.Count == 0)
                        {
                            <div class="alert alert-info" role="alert" id="noComments">
                                <strong>No comments!</strong> There are no comments yet.
                            </div>
                        }
                        else{
                            <div class="alert alert-info" role="alert" id="noComments" style="display:none;">
                                <strong>No comments!</strong> There are no comments yet.
                            </div>
                        }

                        @{
                            int commentId = 0;
                        }
                        @foreach (Comment comment in Model.EventComments)
                        {
                            <div class="card mb-2">
                                <div class="card-header">
                                    <div class="d-flex justify-content-between">
                                        <h5 class="card-title font-weight-bold">
                                            <i class="fa-solid fa-user mr-1"></i> @comment.UserWhoMadeTheComment.Username
                                        </h5>
                                        @*if the comment is yours create the buttons*@
                                        @if(ActiveUser.User.Username == comment.UserWhoMadeTheComment.Username){
                                            <div>
                                                @*button for update modal*@
                                                <button type="button" class="btn btn-primary btn-sm mr-2" data-toggle="modal" data-target="#updateModal-@commentId">
                                                    <i class="fa-solid fa-pencil"></i>
                                                </button>

                                                @*button for delete modal*@
                                                <button type="button" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteModal-@commentId">
                                                    <i class="fa-solid fa-trash"></i>
                                                </button>
                                            </div>

                                            commentId++;
                                        }
                                    </div>
                                    <p class="card-subtitle text-muted">@comment.CommentDate.ToString()</p>
                                </div>
                                <div class="card-body">
                                    @comment.CommentText
                                </div>
                            </div>
                        }
                    </div>
                    <label asp-for="EventComments">Add your comment:</label><br />
                    <textarea class="form-control" id="myComment" rows="3" placeholder="What do you think about this event?"></textarea>
                    <div class="d-flex justify-content-end">
                        <a class="btn btn-primary mt-2 mb-2" href="#" onclick="addComment()">Add Comment</a>
                    </div>
                </div>
                
            </div>
        </div>

        @*this just exists, so the the method in the controller will not have a null value*@
        <input type="hidden" asp-for="EventCreatorName"/>
        <input type="hidden" name="calendarId" value="@ViewData["CalendarId"]" />
        <input type="hidden" name="eventId" value="@ViewData["EventId"]" />
        <input type="hidden" name="year" value="@ViewData["Year"]" />
        <input type="hidden" name="month" value="@ViewData["Month"]" />
        <input type="hidden" name="day" value="@ViewData["Day"]" />
        @*this input is used for the new comments*@
        <input type="hidden" name="newComments" id="newComments" value="" />
        <div class="d-flex justify-content-center mt-md-0 mt-3">
            <a class="btn btn-dark text-center text-white font-weight-bold pt-2 pb-2 mr-3"
               asp-controller="Home" asp-action="ViewCalendarDay" asp-route-calendarId="@ViewData["CalendarId"]"
               asp-route-year="@ViewData["Year"]" asp-route-month="@ViewData["Month"]" asp-route-day="@ViewData["Day"]">Back to Calendar</a>
            <button type="submit" class="btn btn-primary text-center text-white font-weight-bold pt-2 pb-2"
                    onclick="EnableAll(); createCommentsForFormSubmission();">Submit Changes</button>
        </div>
    </div>
</form>

@*delete comment modal*@
@{int i = 0;}
@foreach (Comment comment in Model.EventComments)
{
    @*if the comment is yours create the buttons*@
    @if (ActiveUser.User.Username == comment.UserWhoMadeTheComment.Username)
    {
        <form id="editForm-@i" asp-action="editComment" asp-controller="home" method="post">
            <input name="userWhoMadeTheComment" value="@comment.UserWhoMadeTheComment.Username" hidden>
            <input name="eventId" value="@comment.EventOfComment.Id" hidden>
            <input name="commentDate" value="@comment.CommentDate" hidden>
            <input name="commentText" value="" id="newCommentText" hidden>
            <input name="calendarId" value="@ViewData["CalendarId"]" hidden>
            <input name="year" value="@ViewData["Year"]" hidden>
            <input name="month" value="@ViewData["Month"]" hidden>
            <input name="day" value="@ViewData["Day"]" hidden>
            <input name="oldCommentText" value="@comment.CommentText" hidden>

            <div class="modal fade" id="updateModal-@i">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="updateModalLabel-@i">Update Comment Dialog</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <textarea class="form-control" id="updateCommentTextArea" rows="4" cols="65">@comment.CommentText</textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary" onclick="updateComment()">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <form id="deleteForm-@i" asp-action="deleteComment" asp-controller="home" method="post">
            <input name="userWhoMadeTheComment" value="@comment.UserWhoMadeTheComment.Username" hidden>
            <input name="eventId" value="@comment.EventOfComment.Id" hidden>
            <input name="commentDate" value="@comment.CommentDate" hidden>
            <input name="commentText" value="@comment.CommentText" hidden>
            <input name="calendarId" value="@ViewData["CalendarId"]" hidden>
            <input name="year" value="@ViewData["Year"]" hidden>
            <input name="month" value="@ViewData["Month"]" hidden>
            <input name="day" value="@ViewData["Day"]" hidden>

            <div class="modal fade" id="deleteModal-@i">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalLabel-@i">Comment Deletion Confirmation Dialog</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this comment?</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" style="width:75px;">No</button>
                            <button type="submit" class="btn btn-danger" style="width:75px;">Yes</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        i++;
    }
}


@*edit modal for temporary comments*@
<div class="modal fade" id="editCommentModal" tabindex="-1" role="dialog" aria-labelledby="editCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCommentModalLabel">Edit Comment</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" id="editCommentText" rows="4" cols="65"></textarea>
                <div id="editCommentId" style="display:none;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveComment()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/site.js"></script>

    <script>
        new MultiSelectTag('invitations');
        //counter for the tempComments
        let commentCounter = 0;
        //list for new comments
        let newCommentsId = [];

        function EnableDisableTextBox(textboxId, forein) {
            if (forein == true) {
                return;
            }
            textboxId = String(textboxId)
            var textBox = document.getElementById(textboxId);
            if (textBox.disabled) {
                textBox.removeAttribute("disabled");
            } else {
                textBox.setAttribute("disabled", "disabled");
            }
        }

        //for severons icons change
        function toggleSection(buttonId) {
            const buttonIcon = document.getElementById(buttonId + 'Icon');
            if (buttonIcon.classList.contains('fa-chevron-down')) {
                buttonIcon.classList.remove('fa-chevron-down');
                buttonIcon.classList.add('fa-chevron-up');

            } else {
                buttonIcon.classList.remove('fa-chevron-up');
                buttonIcon.classList.add('fa-chevron-down');
            }
        }

        document.getElementById("showParticipationButton").addEventListener("click", function () {
            toggleSection("showParticipationButton");
        });

        document.getElementById("showCommentButton").addEventListener("click", function () {
            toggleSection("showCommentButton");
        });

        document.getElementById("showEventInformationButton").addEventListener("click", function () {
            toggleSection("showEventInformationButton");
        });

        function EnableAll() {
            document.getElementById("title").removeAttribute("disabled");
            document.getElementById("description").removeAttribute("disabled");
            document.getElementById("startingTime").removeAttribute("disabled");
            document.getElementById("endingTime").removeAttribute("disabled");
        }

        function addComment() {

            // hide the message that there are no comments yet if it exists.
            if (document.getElementById('noComments').style.display != 'none') {
                document.getElementById('noComments').style.display = 'none';
            }

            let commentText = document.getElementById("myComment").value;
            if (!commentText.trim()) {
                alert("Please enter a comment before adding.");
                return;
            }

            // Create a new card for the comment
            let commentCard = document.createElement("div");
            commentCard.classList.add("card", "mb-2");
            //id for deletion
            let commentId = `commentCard${commentCounter}`;
            commentCard.setAttribute("id", commentId);

            // Card Header
            let cardHeader = document.createElement("div");
            cardHeader.classList.add("card-header");

            let cardHeaderFlexPart = document.createElement("div");
            cardHeaderFlexPart.classList.add("d-flex", "justify-content-between")

            let usernameTitle = document.createElement("h5");
            usernameTitle.classList.add("card-title", "font-weight-bold");
            usernameTitle.innerHTML = '<i class="fa-solid fa-user mr-1"></i> ' + "@ActiveUser.User.Username";

            // Add the Edit and Delete buttons to the card header
            let buttonsDiv = document.createElement("div");
            let editButton = document.createElement("a");
            editButton.setAttribute("href", "#");
            editButton.classList.add("btn", "btn-primary", "btn-sm", "mr-2");
            editButton.innerHTML = '<i class="fa-solid fa-pencil"></i>';
            editButton.onclick = function () {
                openEditModal(commentId, commentText);
            };

            let deleteButton = document.createElement("a");
            deleteButton.setAttribute("href", "#");
            deleteButton.classList.add("btn", "btn-danger", "btn-sm");
            deleteButton.innerHTML = '<i class="fa-solid fa-x"></i>';
            deleteButton.onclick = function () {
                removetempComment(commentId);
            };

            cardHeaderFlexPart.appendChild(usernameTitle);
            
            buttonsDiv.appendChild(editButton);
            buttonsDiv.appendChild(deleteButton);
            cardHeaderFlexPart.appendChild(buttonsDiv);

            let dateSubtitle = document.createElement("p");
            dateSubtitle.classList.add("card-subtitle", "text-muted");
            dateSubtitle.innerText = new Date().toLocaleString();

            cardHeader.appendChild(cardHeaderFlexPart);
            cardHeader.appendChild(dateSubtitle);

            // Card Body
            let cardBody = document.createElement("div");
            cardBody.classList.add("card-body");
            cardBody.innerText = commentText;

            // Assemble the card
            commentCard.appendChild(cardHeader);
            commentCard.appendChild(cardBody);

            // Append the card to the commentArea
            let commentArea = document.getElementById("commentArea");
            commentArea.appendChild(commentCard);

            // Clear the comment textarea after adding the comment
            document.getElementById("myComment").value = "";

            // Increment the comment counter for the next comment
            commentCounter++;
            newCommentsId.push(commentId);
        }

        // Function to remove a comment from the list
        function removetempComment(commentId) {
            let commentCard = document.getElementById(commentId);
            if (commentCard) {
                const index = newCommentsId.indexOf(commentId);
                newCommentsId.splice(index, 1);
                commentCard.remove();
            }

            // Show the "no comments" message if there are no comments left
            if (document.getElementById('commentArea').childElementCount === 1) {
                document.getElementById('noComments').style.display = 'block';
            }
        }

        //open modal for edit
        function openEditModal(commentId, commentText) {
            console.log("wow");
            // Set the comment text in the modal
            document.getElementById("editCommentText").value = commentText;

            // Set the comment ID in the modal (for identification during save)
            document.getElementById("editCommentId").value = commentId;

            // Show the modal
            $("#editCommentModal").modal("show");
        }

        function saveComment() {
            // Get the edited text from the modal
            let editedText = document.getElementById("editCommentText").value;

            // Get the comment ID for identification
            let commentId = document.getElementById("editCommentId").value;

            // Update the comment text on the page
            let commentCard = document.getElementById(commentId);
            if (commentCard) {
                commentCard.querySelector(".card-body").innerText = editedText;
            }

            // Hide the modal
            $("#editCommentModal").modal("hide");
        }

        function createCommentsForFormSubmission(){
            
            let newComments = "";
            for(let i = 0; i < newCommentsId.length; i++){
                let commentCardId = document.getElementById(newCommentsId[i]);
                newComments += commentCardId.querySelector(".card-body").innerText;
                newComments += "|";
            }
            newComments = newComments.substring(0, newComments.length -1);

            // Set the value of the hidden input
            document.getElementById("newComments").value = newComments;
        }

        function updateComment(){
            document.getElementById("newCommentText").value = document.getElementById("updateCommentTextArea").value;
        }

        // Function to show collapsed sections if not on mobile size on resize to avoid sections disappearing
        function showCollapsedSectionsOnResize() {
            const mobileBreakpoint = 768;

            // Get the window width
            const windowWidth = window.innerWidth || document.documentElement.clientWidth;

            // Get the collapsed section elements
            const eventInformationSection = document.getElementById('eventInformationSection');

            // Check if the window width is above the mobile breakpoint
            if (windowWidth >= mobileBreakpoint) {
                eventInformationSection.classList.add('show');
                document.getElementById('showEventInformationButtonIcon').classList.remove('fa-chevron-down');
                document.getElementById('showEventInformationButtonIcon').classList.add('fa-chevron-up');
            }
        }

        // Attach the function to the window's resize event
        window.addEventListener('resize', showCollapsedSectionsOnResize);
    </script>
    
}
