@model SoftwareTechnologyCalendarApplication.Models.Event

@{
    ViewData["Title"] = "editEvent";
    // placeholder=@Model.Title
}

<style>
    .notification-box {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        margin-bottom: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #fafafa
    }

    .notification-title {
        margin: 0;
    }

    .notification-btn {
        border: none;
        background: none;
        cursor: pointer;
    }

    .notification-check-btn {
        color: blue;
    }

    .notification-close-btn {
        color: red;
    }

    .marker {
    }

    .mult-select-tag {
        display: flex;
        width: 100%;
        flex-direction: column;
        align-items: center;
        position: relative;
        --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        --tw-shadow-color: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);
        --border-color: rgb(218, 221, 224);
        font-family: Verdana, sans-serif;
    }

        .mult-select-tag .wrapper {
            width: 100%;
        }

        .mult-select-tag .body {
            display: flex;
            border: 1px solid var(--border-color);
            background: white;
            min-height: 2.15rem;
            width: 100%;
            min-width: 14rem;
        }

        .mult-select-tag .input-container {
            display: flex;
            flex-wrap: wrap;
            flex: 1 1 auto;
            padding: 0.1rem;
        }

        .mult-select-tag .input-body {
            display: flex;
            width: 100%;
        }

        .mult-select-tag .input {
            flex: 1;
            background: transparent;
            border-radius: 0.25rem;
            padding: 0.45rem;
            margin: 10px;
            color: #2d3748;
            outline: 0;
            border: 1px solid var(--border-color);
        }

        .mult-select-tag .btn-container {
            color: #e2eBf0;
            padding: 0.5rem;
            display: flex;
            border-left: 1px solid var(--border-color);
        }

        .mult-select-tag button {
            cursor: pointer;
            width: 100%;
            color: #718096;
            outline: 0;
            height: 100%;
            border: none;
            padding: 0;
            background: transparent;
            background-image: none;
            -webkit-appearance: none;
            text-transform: none;
            margin: 0;
        }

            .mult-select-tag button:first-child {
                width: 1rem;
                height: 90%;
            }


        .mult-select-tag .drawer {
            position: absolute;
            background: white;
            max-height: 15rem;
            z-index: 40;
            top: 98%;
            width: 100%;
            overflow-y: scroll;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
        }

        .mult-select-tag ul {
            list-style-type: none;
            padding: 0.5rem;
            margin: 0;
        }

            .mult-select-tag ul li {
                padding: 0.5rem;
                border-radius: 0.25rem;
                cursor: pointer;
            }

                .mult-select-tag ul li:hover {
                    background: rgb(243 244 246);
                }

        .mult-select-tag .item-container {
            display: flex;
            justify-content: center;
            align-items: center;
            color: #2c7a7b;
            padding: 0.2rem 0.4rem;
            margin: 0.2rem;
            font-weight: 500;
            border: 1px solid #81e6d9;
            background: #e6fffa;
            border-radius: 9999px;
        }

        .mult-select-tag .item-label {
            max-width: 100%;
            line-height: 1;
            font-size: 0.75rem;
            font-weight: 400;
            flex: 0 1 auto;
            color: #2c7a7b;
        }

        .mult-select-tag .item-close-container {
            display: flex;
            flex: 1 1 auto;
            flex-direction: row-reverse;
        }

        .mult-select-tag .item-close-svg {
            width: 1rem;
            margin-left: 0.5rem;
            height: 1rem;
            cursor: pointer;
            border-radius: 9999px;
            display: block;
        }

    .hidden {
        display: none;
    }

    .mult-select-tag .shadow {
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    }

    .mult-select-tag .rounded {
        border-radius: .375rem;
    }

</style>

@{
    if ((int)ViewData["forein"] == 0)
    {
        <h1 class="text-center">Event editing form</h1>

        <h4 class="text-center">Please edit the following event as you like:</h4>
        <hr />
    }
    else if ((int)ViewData["forein"] == 1)
    {
        <h1 class="text-center">Event details</h1>

        <h4 class="text-center">It seems, you are not the creator of the event. Thus, you can not alter its details, but you can always add a comment and toggle your personal alertstatus.</h4>
        <hr />
    }
}



<form asp-action="editEvent">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input name="calendarId" value="@ViewData["CalendarId"]" hidden />
    <div class="row">
        <div class="col-md-3">
            <div style="margin-top: 25px;">
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <div class="input-group mb-3">
                        <input asp-for="Title" class="form-control" id="title" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('title',@ViewData["forein"])">

                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    ::before
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                </svg>

                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div style="margin-top: 15px;">
                <div class="form-group">
                    <label asp-for="StartingTime" class="control-label"></label>
                    <div class="input-group mb-3">
                        <input asp-for="StartingTime" class="form-control" id="startingTime" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                        <span asp-validation-for="StartingTime" class="text-danger"></span>
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('startingTime',@ViewData["forein"])">

                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    ::before
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                </svg>

                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div style="margin-top: 15px;">
                <div class="form-group">
                    <label asp-for="EndingTime" class="control-label"></label>
                    <div class="input-group mb-3">
                        <input asp-for="EndingTime" class="form-control" id="endingTime" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" />
                        <span asp-validation-for="EndingTime" class="text-danger"></span>
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('endingTime',@ViewData["forein"])">

                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    ::before
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                </svg>

                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4 offset-md-1">
            <div class="row" style="margin-top: 25px;">
                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <div class="input-group mb-3">
                        <textarea asp-for="Description" class="form-control" id="description" onblur="this.setAttribute('disabled', 'disabled');" disabled="disabled" rows="4" cols="65"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" type="button" onclick="EnableDisableTextBox('description',@ViewData["forein"])">

                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    ::before
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"></path>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"></path>
                                </svg>

                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 50px; margin-left: 10px;">
                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="AlertStatus" /> I want to be notified when the event begins
                    </label>
                </div>
            </div>
        </div>
        <div class="col-md-3 offset-md-1">
            <div style="margin-top: 15px;">
                <label for="Invitation">Who do you want to invite?</label>
                <select name="Invitation[]" class="form-control" id="Invitation" multiple>
                    @foreach (string username in (List<string>)ViewData["usernames"])
                    {
                        <option value="@username">@username</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        Comments:
        <div id="commentArea">
            @foreach (Comment comment in Model.EventComments)
            {
                <div class="notification-box">
                    <div>
                        @comment.UserWhoMadeTheComment.Username - @comment.CommentDate.ToString()
                    </div>
                    <hr>
                    <div>
                        @comment.CommentText
                    </div>
                </div>
            }
        </div>
        <div>
            <label asp-for="EventComments">Add your comment:</label><br />
            <textarea asp-for="EventComments" class="" id="myComment" rows="4" cols="65" placeholder="What do you think about this event?"></textarea>
            <button class="btn btn-primary" onclick="addComment()">Add comment</button>
        </div>
    </div>
    <input type="hidden" name="calendarId" value="@ViewData["CalendarId"]" />
    <input type="hidden" name="eventId" value="@ViewData["EventId"]" />
    <input type="hidden" name="year" value="@ViewData["Year"]" />
    <input type="hidden" name="month" value="@ViewData["Month"]" />
    <input type="hidden" name="day" value="@ViewData["Day"]" />
    <div class="d-flex justify-content-center" style="margin-top: 35px;">
        <a class="btn btn-outline-primary" asp-controller="Home" asp-action="ViewCalendarDay" asp-route-calendarId="@ViewData["CalendarId"]"
           asp-route-year="@ViewData["Year"]" asp-route-month="@ViewData["Month"]" asp-route-day="@ViewData["Day"]">Back to Calendar</a>
        <div class="ml-3">
            <input type="submit" value="Submit Changes" class="btn btn-outline-primary" onclick="EnableAll()" />
        </div>
    </div>
</form>

<script type="text/javascript">
    function addComment(){
        let comment = document.getElementById("myComment").value;
        const coment = document.createElement("div");
        const userr = document.createElement("div");
        coment.innerText = comment;
        //coment.classList.add("notification-box");
        userr.innerText = @ActiveUser.User.Username + "-" + @DateTime.Now.ToString();
        //userr.classList.add("notification-box");
        document.getElementById("commentArea").appendChild(userr);
        document.getElementById("commentArea").appendChild(document.createElement("hr"));
        document.getElementById("commentArea").appendChild(coment);
        document.getElementById("myComment").value="";
    }
</script>

<script type="text/javascript">
    function MultiSelectTag(el, customs = { shadow: false, rounded: true }) {
        var element = null
        var options = null
        var customSelectContainer = null
        var wrapper = null
        var btnContainer = null
        var body = null
        var inputContainer = null
        var inputBody = null
        var input = null
        var button = null
        var drawer = null
        var ul = null
        var domParser = new DOMParser()
        init()

        function init() {
            element = document.getElementById(el)
            createElements()
            initOptions()
            enableItemSelection()
            setValues(false)

            button.addEventListener('click', () => {
                if (drawer.classList.contains('hidden')) {
                    initOptions()
                    enableItemSelection()
                    drawer.classList.remove('hidden')
                    input.focus()
                }
            })

            input.addEventListener('keyup', (e) => {
                initOptions(e.target.value)
                enableItemSelection()
            })

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && inputContainer.childElementCount > 1) {
                    const child = body.children[inputContainer.childElementCount - 2].firstChild
                    const option = options.find((op) => op.value == child.dataset.value)
                    option.selected = false
                    removeTag(child.dataset.value)
                    setValues()
                }

            })

            window.addEventListener('click', (e) => {
                if (!customSelectContainer.contains(e.target)) {
                    drawer.classList.add('hidden')
                }
            });

        }

        function createElements() {
            // Create custom elements
            options = getOptions();
            element.classList.add('hidden')

            // .multi-select-tag
            customSelectContainer = document.createElement('div')
            customSelectContainer.classList.add('mult-select-tag')

            // .container
            wrapper = document.createElement('div')
            wrapper.classList.add('wrapper')

            // body
            body = document.createElement('div')
            body.classList.add('body')
            if (customs.shadow) {
                body.classList.add('shadow')
            }
            if (customs.rounded) {
                body.classList.add('rounded')
            }

            // .input-container
            inputContainer = document.createElement('div')
            inputContainer.classList.add('input-container')

            // input
            input = document.createElement('input')
            input.classList.add('input')
            input.placeholder = `${customs.placeholder || 'Search...'}`

            inputBody = document.createElement('inputBody')
            inputBody.classList.add('input-body')
            inputBody.append(input)

            body.append(inputContainer)

            // .btn-container
            btnContainer = document.createElement('div')
            btnContainer.classList.add('btn-container')

            // button
            button = document.createElement('button')
            button.type = 'button'
            btnContainer.append(button)

            const icon = domParser.parseFromString(`<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polyline points="18 15 12 21 6 15"></polyline></svg>`, 'image/svg+xml').documentElement
            button.append(icon)


            body.append(btnContainer)
            wrapper.append(body)

            drawer = document.createElement('div');
            drawer.classList.add(...['drawer', 'hidden'])
            if (customs.shadow) {
                drawer.classList.add('shadow')
            }
            if (customs.rounded) {
                drawer.classList.add('rounded')
            }
            drawer.append(inputBody)
            ul = document.createElement('ul');

            drawer.appendChild(ul)

            customSelectContainer.appendChild(wrapper)
            customSelectContainer.appendChild(drawer)

            // Place TailwindTagSelection after the element
            if (element.nextSibling) {
                element.parentNode.insertBefore(customSelectContainer, element.nextSibling)
            }
            else {
                element.parentNode.appendChild(customSelectContainer);
            }
        }

        function initOptions(val = null) {
            ul.innerHTML = ''
            for (var option of options) {
                if (option.selected) {
                    !isTagSelected(option.value) && createTag(option)
                }
                else {
                    const li = document.createElement('li')
                    li.innerHTML = option.label
                    li.dataset.value = option.value

                    // For search
                    if (val && option.label.toLowerCase().startsWith(val.toLowerCase())) {
                        ul.appendChild(li)
                    }
                    else if (!val) {
                        ul.appendChild(li)
                    }
                }
            }
        }

        function createTag(option) {
            // Create and show selected item as tag
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('item-container');
            const itemLabel = document.createElement('div');
            itemLabel.classList.add('item-label');
            itemLabel.innerHTML = option.label
            itemLabel.dataset.value = option.value
            const itemClose = new DOMParser().parseFromString(`<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="item-close-svg">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>`, 'image/svg+xml').documentElement

            itemClose.addEventListener('click', (e) => {
                const unselectOption = options.find((op) => op.value == option.value)
                unselectOption.selected = false
                removeTag(option.value)
                initOptions()
                setValues()
            })

            itemDiv.appendChild(itemLabel)
            itemDiv.appendChild(itemClose)
            inputContainer.append(itemDiv)
        }

        function enableItemSelection() {
            // Add click listener to the list items
            for (var li of ul.children) {
                li.addEventListener('click', (e) => {
                    options.find((o) => o.value == e.target.dataset.value).selected = true
                    input.value = null
                    initOptions()
                    setValues()
                    input.focus()
                })
            }
        }

        function isTagSelected(val) {
            // If the item is already selected
            for (var child of inputContainer.children) {
                if (!child.classList.contains('input-body') && child.firstChild.dataset.value == val) {
                    return true
                }
            }
            return false
        }
        function removeTag(val) {
            // Remove selected item
            for (var child of inputContainer.children) {
                if (!child.classList.contains('input-body') && child.firstChild.dataset.value == val) {
                    inputContainer.removeChild(child)
                }
            }
        }
        function setValues(fireEvent = true) {
            // Update element final values
            selected_values = []
            for (var i = 0; i < options.length; i++) {
                element.options[i].selected = options[i].selected
                if (options[i].selected) {
                    selected_values.push({ label: options[i].label, value: options[i].value })
                }
            }
            if (fireEvent && customs.hasOwnProperty('onChange')) {
                customs.onChange(selected_values)
            }
        }
        function getOptions() {
            // Map element options
            return [...element.options].map((op) => {
                return {
                    value: op.value,
                    label: op.label,
                    selected: op.selected,
                }
            })
        }
    }
</script>

<script type="text/javascript">
    new MultiSelectTag('Invitation', {
        rounded: true,    // default true
        shadow: false,      // default false
        placeholder: 'Search',  // default Search...
        onChange: function (values) {
            console.log(values)
        }
    })  // id
</script>


<script type="text/javascript">
    function Validation() {
        var startingTime = document.getElementById("startingtime").value;
        var endingTime = document.getElementById("endingtime").value;
        const Start = Date.parse(startingTime);
        const End = Date.parse(endingTime);
        let minsOfStart = startingTime.split(":")[1];
        let minsOfEnd = endingTime.split(":")[1];
        if (minsOfStart != "00" && minsOfStart != "30") {
            alert("The minute field of the starting time of the event must be :00 or :30. Nothing else.");
            return false;
        }
        if (minsOfEnd != "00" && minsOfEnd != "30") {
            alert("The minute field of the ending time of the event must be :00 or :30. Nothing else.");
            return false;
        }
        if (Start >= End) {
            alert("The starting time of the event must cannot be greater than or equal to the ending time.");
            return false;
        }
        var title = document.getElementById("title").value;
        if (title == null || title == "") {
            alert("You need to provide a title for the event before submiting.");
            return false;
        }
    }
</script>

<script type="text/javascript">
    function EnableDisableTextBox(textboxId,forein) {
        if (forein == 1) {
            return 0;
        }
        textboxId=String(textboxId)
        var textBox = document.getElementById(textboxId);
        if (textBox.disabled) {
            textBox.removeAttribute("disabled");
        } else {
            textBox.setAttribute("disabled", "disabled");
        }
    }
</script>

<script type="text/javascript">
    function EnableAll() {
        document.getElementById("title").removeAttribute("disabled");
        document.getElementById("description").removeAttribute("disabled");
        document.getElementById("startingTime").removeAttribute("disabled");
        document.getElementById("endingTime").removeAttribute("disabled");
    }
</script>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
